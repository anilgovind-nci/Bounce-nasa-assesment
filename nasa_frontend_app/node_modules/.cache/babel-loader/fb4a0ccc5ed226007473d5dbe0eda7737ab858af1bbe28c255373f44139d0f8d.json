{"ast":null,"code":"var _jsxFileName = \"/Users/anilgovindka/JOB-ASSIGNMENTS/nasa-frontend-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport NasaGrid from './components/NasaGrid';\nimport Pagination from './components/Pagination';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [apodItems, setApodItems] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 6;\n  const apiKey = process.env.REACT_APP_NASA_API_KEY;\n  useEffect(() => {\n    const fetchAPOD = async () => {\n      try {\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(endDate.getDate() - 29); // Fetch last 30 days\n\n        const formatDate = date => date.toISOString().split('T')[0];\n        const url = `https://api.nasa.gov/planetary/apod?api_key=${apiKey}&start_date=${formatDate(startDate)}&end_date=${formatDate(endDate)}`;\n        const res = await fetch(url);\n        const data = await res.json();\n        const imageOnly = data.filter(item => item.media_type === 'image').sort((a, b) => new Date(b.date) - new Date(a.date));\n        setApodItems(imageOnly);\n      } catch (err) {\n        console.error('Failed to fetch APOD:', err);\n      }\n    };\n    fetchAPOD();\n  }, [apiKey]);\n\n  // Pagination\n  const totalPages = Math.ceil(apodItems.length / itemsPerPage);\n  const indexOfLast = currentPage * itemsPerPage;\n  const indexOfFirst = indexOfLast - itemsPerPage;\n  const currentItems = apodItems.slice(indexOfFirst, indexOfLast);\n  const handlePageChange = page => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: apodItems.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NasaGrid, {\n        items: currentItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        currentPage: currentPage,\n        totalPages: totalPages,\n        onPageChange: handlePageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-3\",\n        children: \"Loading APOD data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1vjfR9Qqt9/HaIuNGMx7Ha+b/XY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","NasaGrid","Pagination","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","apodItems","setApodItems","currentPage","setCurrentPage","itemsPerPage","apiKey","process","env","REACT_APP_NASA_API_KEY","fetchAPOD","endDate","Date","startDate","setDate","getDate","formatDate","date","toISOString","split","url","res","fetch","data","json","imageOnly","filter","item","media_type","sort","a","b","err","console","error","totalPages","Math","ceil","length","indexOfLast","indexOfFirst","currentItems","slice","handlePageChange","page","children","items","fileName","_jsxFileName","lineNumber","columnNumber","onPageChange","className","role","_c","$RefreshReg$"],"sources":["/Users/anilgovindka/JOB-ASSIGNMENTS/nasa-frontend-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport NasaGrid from './components/NasaGrid';\nimport Pagination from './components/Pagination';\n\nfunction App() {\n  const [apodItems, setApodItems] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 6;\n  const apiKey = process.env.REACT_APP_NASA_API_KEY;\n\n  useEffect(() => {\n    const fetchAPOD = async () => {\n      try {\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(endDate.getDate() - 29); // Fetch last 30 days\n\n        const formatDate = (date) => date.toISOString().split('T')[0];\n\n        const url = `https://api.nasa.gov/planetary/apod?api_key=${apiKey}&start_date=${formatDate(startDate)}&end_date=${formatDate(endDate)}`;\n        const res = await fetch(url);\n        const data = await res.json();\n\n        const imageOnly = data\n          .filter((item) => item.media_type === 'image')\n          .sort((a, b) => new Date(b.date) - new Date(a.date));\n\n        setApodItems(imageOnly);\n      } catch (err) {\n        console.error('Failed to fetch APOD:', err);\n      }\n    };\n\n    fetchAPOD();\n  }, [apiKey]);\n\n  // Pagination\n  const totalPages = Math.ceil(apodItems.length / itemsPerPage);\n  const indexOfLast = currentPage * itemsPerPage;\n  const indexOfFirst = indexOfLast - itemsPerPage;\n  const currentItems = apodItems.slice(indexOfFirst, indexOfLast);\n\n  const handlePageChange = (page) => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page);\n    }\n  };\n\n  return (\n    <div>\n      {apodItems.length ? (\n        <>\n          <NasaGrid items={currentItems} />\n          <Pagination\n            currentPage={currentPage}\n            totalPages={totalPages}\n            onPageChange={handlePageChange}\n          />\n        </>\n      ) : (\n        <div className=\"text-center mt-5\">\n          <div className=\"spinner-border text-primary\" role=\"status\" />\n          <p className=\"mt-3\">Loading APOD data...</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}