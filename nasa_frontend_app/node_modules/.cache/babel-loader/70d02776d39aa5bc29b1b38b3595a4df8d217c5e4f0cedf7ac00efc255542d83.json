{"ast":null,"code":"var _jsxFileName = \"/Users/anilgovindka/JOB-ASSIGNMENTS/nasa-frontend-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const pageSize = 10; // items per page\n\n  const fetchImages = async url => {\n    try {\n      const res = await fetch(url);\n      let data = await res.json();\n      if (!Array.isArray(data)) data = [data];\n      setImages(data);\n      setCurrentPage(1); // reset to page 1 on new fetch\n    } catch (err) {\n      console.error('Fetch failed', err);\n    }\n  };\n\n  // Calculate items for current page\n  const indexOfLast = currentPage * pageSize;\n  const indexOfFirst = indexOfLast - pageSize;\n  const currentImages = images.slice(indexOfFirst, indexOfLast);\n  const totalPages = Math.ceil(images.length / pageSize);\n  const goToNextPage = () => {\n    setCurrentPage(page => Math.min(page + 1, totalPages));\n  };\n  const goToPrevPage = () => {\n    setCurrentPage(page => Math.max(page - 1, 1));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onFetch: fetchImages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageGrid, {\n      items: currentImages,\n      onSelect: setSelectedImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), images.length > pageSize && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination-controls\",\n      style: {\n        margin: '1rem',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToPrevPage,\n        disabled: currentPage === 1,\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          margin: '0 10px'\n        },\n        children: [\"Page \", currentPage, \" of \", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToNextPage,\n        disabled: currentPage === totalPages,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ImageModal, {\n      item: selectedImage,\n      show: showModal,\n      onClose: () => setShowModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"kwSGPep6ZApBzh4OC/kuBxkMr2o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","images","setImages","selectedImage","setSelectedImage","showModal","setShowModal","currentPage","setCurrentPage","pageSize","fetchImages","url","res","fetch","data","json","Array","isArray","err","console","error","indexOfLast","indexOfFirst","currentImages","slice","totalPages","Math","ceil","length","goToNextPage","page","min","goToPrevPage","max","children","Navbar","onFetch","fileName","_jsxFileName","lineNumber","columnNumber","ImageGrid","items","onSelect","className","style","margin","textAlign","onClick","disabled","ImageModal","item","show","onClose","_c","$RefreshReg$"],"sources":["/Users/anilgovindka/JOB-ASSIGNMENTS/nasa-frontend-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const pageSize = 10; // items per page\n\n  const fetchImages = async (url) => {\n    try {\n      const res = await fetch(url);\n      let data = await res.json();\n      if (!Array.isArray(data)) data = [data];\n      setImages(data);\n      setCurrentPage(1); // reset to page 1 on new fetch\n    } catch (err) {\n      console.error('Fetch failed', err);\n    }\n  };\n\n  // Calculate items for current page\n  const indexOfLast = currentPage * pageSize;\n  const indexOfFirst = indexOfLast - pageSize;\n  const currentImages = images.slice(indexOfFirst, indexOfLast);\n\n  const totalPages = Math.ceil(images.length / pageSize);\n\n  const goToNextPage = () => {\n    setCurrentPage((page) => Math.min(page + 1, totalPages));\n  };\n\n  const goToPrevPage = () => {\n    setCurrentPage((page) => Math.max(page - 1, 1));\n  };\n\n  return (\n    <>\n      <Navbar onFetch={fetchImages} />\n      <ImageGrid items={currentImages} onSelect={setSelectedImage} />\n      \n      {/* Pagination controls */}\n      {images.length > pageSize && (\n        <div className=\"pagination-controls\" style={{margin: '1rem', textAlign: 'center'}}>\n          <button onClick={goToPrevPage} disabled={currentPage === 1}>Prev</button>\n          <span style={{margin: '0 10px'}}>\n            Page {currentPage} of {totalPages}\n          </span>\n          <button onClick={goToNextPage} disabled={currentPage === totalPages}>Next</button>\n        </div>\n      )}\n\n      <ImageModal item={selectedImage} show={showModal} onClose={() => setShowModal(false)} />\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}