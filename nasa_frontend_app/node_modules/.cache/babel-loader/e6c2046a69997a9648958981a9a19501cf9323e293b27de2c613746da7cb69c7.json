{"ast":null,"code":"var _jsxFileName = \"/Users/anilgovindka/JOB-ASSIGNMENTS/nasa-frontend-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport ImageGrid from './components/ImageGrid';\nimport ImageModal from './components/ImageModal';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  // const BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\n  const fetchImages = async path => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_BASE_URL}${path}`);\n      let data = await res.json();\n      if (!Array.isArray(data)) data = [data];\n      setImages(data);\n    } catch (err) {\n      console.error('Fetch failed', err);\n    }\n  };\n  const handleSelectImage = img => {\n    setSelectedImage(img);\n    setShowModal(true);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onFetch: fetchImages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageGrid, {\n      items: images,\n      onSelect: handleSelectImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageModal, {\n      item: selectedImage,\n      show: showModal,\n      onClose: () => setShowModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"zlTd6igrf/7FZswp+38UCTG9hJ0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Navbar","ImageGrid","ImageModal","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","images","setImages","selectedImage","setSelectedImage","showModal","setShowModal","fetchImages","path","res","fetch","process","env","REACT_APP_API_BASE_URL","data","json","Array","isArray","err","console","error","handleSelectImage","img","children","onFetch","fileName","_jsxFileName","lineNumber","columnNumber","items","onSelect","item","show","onClose","_c","$RefreshReg$"],"sources":["/Users/anilgovindka/JOB-ASSIGNMENTS/nasa-frontend-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport ImageGrid from './components/ImageGrid';\nimport ImageModal from './components/ImageModal';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  // const BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\n  const fetchImages = async (path) => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_BASE_URL}${path}`);\n      let data = await res.json();\n      if (!Array.isArray(data)) data = [data];\n      setImages(data);\n    } catch (err) {\n      console.error('Fetch failed', err);\n    }\n  };\n\n  const handleSelectImage = (img) => {\n    setSelectedImage(img);\n    setShowModal(true);\n  };\n\n  return (\n    <>\n      <Navbar onFetch={fetchImages} />\n      <ImageGrid items={images} onSelect={handleSelectImage} />\n      <ImageModal item={selectedImage} show={showModal} onClose={() => setShowModal(false)} />\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAEjD;;EAEA,MAAMgB,WAAW,GAAG,MAAOC,IAAI,IAAK;IAClC,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,GAAGL,IAAI,EAAE,CAAC;MACvE,IAAIM,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;MAC3B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAEA,IAAI,GAAG,CAACA,IAAI,CAAC;MACvCZ,SAAS,CAACY,IAAI,CAAC;IACjB,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,GAAG,CAAC;IACpC;EACF,CAAC;EAED,MAAMG,iBAAiB,GAAIC,GAAG,IAAK;IACjClB,gBAAgB,CAACkB,GAAG,CAAC;IACrBhB,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,oBACEV,OAAA,CAAAE,SAAA;IAAAyB,QAAA,gBACE3B,OAAA,CAACJ,MAAM;MAACgC,OAAO,EAAEjB;IAAY;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChChC,OAAA,CAACH,SAAS;MAACoC,KAAK,EAAE5B,MAAO;MAAC6B,QAAQ,EAAET;IAAkB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzDhC,OAAA,CAACF,UAAU;MAACqC,IAAI,EAAE5B,aAAc;MAAC6B,IAAI,EAAE3B,SAAU;MAAC4B,OAAO,EAAEA,CAAA,KAAM3B,YAAY,CAAC,KAAK;IAAE;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACxF,CAAC;AAEP;AAAC5B,EAAA,CA9BQD,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AAgCZ,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}