{"ast":null,"code":"var _jsxFileName = \"/Users/anilgovindka/JOB-ASSIGNMENTS/nasa-frontend-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport ImageGrid from './components/ImageGrid';\nimport ImageModal from './components/ImageModal';\nimport Pagination from './components/Pagination'; // Import Pagination component\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const pageSize = integer(process.env.PAGE_ITEMS_LIMIT);\n  const fetchImages = async path => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_BASE_URL}${path}`);\n      let data = await res.json();\n      if (!Array.isArray(data)) data = [data];\n      setImages(data);\n      setCurrentPage(1); // Reset to page 1 after new fetch\n    } catch (err) {\n      console.error('Fetch failed', err);\n    }\n  };\n  const handleSelectImage = img => {\n    setSelectedImage(img);\n    setShowModal(true);\n  };\n\n  // Calculate images to display on current page\n  const indexOfLast = currentPage * pageSize;\n  const indexOfFirst = indexOfLast - pageSize;\n  const currentImages = images.slice(indexOfFirst, indexOfLast);\n  const totalPages = Math.ceil(images.length / pageSize);\n  const handlePageChange = page => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onFetch: fetchImages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageGrid, {\n      items: currentImages,\n      onSelect: handleSelectImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), images.length > pageSize && /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalPages: totalPages,\n      onPageChange: handlePageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ImageModal, {\n      item: selectedImage,\n      show: showModal,\n      onClose: () => setShowModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"kwSGPep6ZApBzh4OC/kuBxkMr2o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Navbar","ImageGrid","ImageModal","Pagination","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","images","setImages","selectedImage","setSelectedImage","showModal","setShowModal","currentPage","setCurrentPage","pageSize","integer","process","env","PAGE_ITEMS_LIMIT","fetchImages","path","res","fetch","REACT_APP_API_BASE_URL","data","json","Array","isArray","err","console","error","handleSelectImage","img","indexOfLast","indexOfFirst","currentImages","slice","totalPages","Math","ceil","length","handlePageChange","page","children","onFetch","fileName","_jsxFileName","lineNumber","columnNumber","items","onSelect","onPageChange","item","show","onClose","_c","$RefreshReg$"],"sources":["/Users/anilgovindka/JOB-ASSIGNMENTS/nasa-frontend-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport ImageGrid from './components/ImageGrid';\nimport ImageModal from './components/ImageModal';\nimport Pagination from './components/Pagination';  // Import Pagination component\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const pageSize = integer (process.env.PAGE_ITEMS_LIMIT);\n\n  const fetchImages = async (path) => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_BASE_URL}${path}`);\n      let data = await res.json();\n      if (!Array.isArray(data)) data = [data];\n      setImages(data);\n      setCurrentPage(1); // Reset to page 1 after new fetch\n    } catch (err) {\n      console.error('Fetch failed', err);\n    }\n  };\n\n  const handleSelectImage = (img) => {\n    setSelectedImage(img);\n    setShowModal(true);\n  };\n\n  // Calculate images to display on current page\n  const indexOfLast = currentPage * pageSize;\n  const indexOfFirst = indexOfLast - pageSize;\n  const currentImages = images.slice(indexOfFirst, indexOfLast);\n\n  const totalPages = Math.ceil(images.length / pageSize);\n\n  const handlePageChange = (page) => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page);\n    }\n  };\n\n  return (\n    <>\n      <Navbar onFetch={fetchImages} />\n      <ImageGrid items={currentImages} onSelect={handleSelectImage} />\n\n      {images.length > pageSize && (\n        <Pagination\n          currentPage={currentPage}\n          totalPages={totalPages}\n          onPageChange={handlePageChange}\n        />\n      )}\n\n      <ImageModal item={selectedImage} show={showModal} onClose={() => setShowModal(false)} />\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}